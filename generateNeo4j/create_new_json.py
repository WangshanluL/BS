
import json

# Original JSON data
with open('origin_data.json', 'r', encoding='utf-8') as file:
    data = json.load(file)

# 主题描述
topic_descriptions = {
    "存储管理": "存储管理负责计算机系统中的存储资源管理，包括存储层次结构、程序加载与链接以及内存分配。",
    "文件管理": "文件管理负责组织、存储、检索、命名、共享和保护文件数据，提供文件操作接口和优化存储空间利用。",
    "虚拟存储": "虚拟存储是一种内存管理技术，为程序提供超过物理内存大小的地址空间，实现内存与外存的自动交换。",
    "进程与线程": "进程与线程是操作系统中的执行单位，进程是资源分配的基本单位，线程是CPU调度的基本单位。",
    "操作系统概述": "操作系统是计算机系统的核心软件，管理计算机硬件与软件资源，提供公共服务，并为应用程序提供执行环境。",
    "输入输出管理": "输入输出管理负责控制计算机系统与外部设备的交互，管理各种输入输出设备的操作和数据传输。",
    "磁盘存储管理": "磁盘存储管理负责磁盘空间的分配、回收和优化，确保文件系统有效地利用磁盘资源并保障数据安全。",
    "处理机调度与死锁": "处理机调度负责合理分配CPU资源，而死锁管理则预防、避免和解决系统中的死锁问题。",
    "进程同步": "进程同步解决多进程并发执行时的协作关系，确保对共享资源的访问顺序合理，防止冲突和不一致。"
}

# 子主题描述
subtopic_descriptions = {
    "存储管理": {
        "存储层次结构": "存储层次结构包括不同级别的存储设备，每种设备在速度、容量和成本上各有特点。",
        "程序加载与链接": "程序的加载与链接是将编译后的程序正确加载到内存并执行的过程，涉及编译方式、链接方式和装入方式。",
        "内存分配": "内存分配负责为程序分配内存空间，包括连续分配和离散分配两种主要方式以及相关的分配策略。"
    },
    "文件管理": {
        "文件系统": "文件系统是操作系统中管理文件的软件，提供文件组织、存储和检索的方法。",
        "文件结构": "文件结构定义了文件中数据的逻辑组织方式，影响文件的访问效率和功能。",
        "目录管理": "目录管理提供文件组织和检索的层次结构，支持文件的查找、共享和保护。",
        "文件安全": "文件安全保护文件免受未授权访问和损坏，确保数据的完整性和保密性。"
    },
    "虚拟存储": {
        "虚拟存储基本概念": "虚拟存储的基本概念包括局部性原理和虚拟存储的特性，是实现内存扩充的理论基础。",
        "分页管理": "分页管理是虚拟存储的主要实现方式，通过页表、缺页中断和地址变换等机制实现内存扩充和保护。"
    },
    "进程与线程": {
        "进程管理": "进程管理负责进程的创建、调度、同步和通信，确保多进程能够并发执行并高效利用系统资源。",
        "线程管理": "线程管理提供进程内的并发执行单元，降低上下文切换开销，提高系统吞吐量和响应时间。"
    },
    "操作系统概述": {
        "运行环境": "操作系统的运行环境包括不同的执行模式、中断与异常处理机制以及系统调用接口。",
        "操作系统特性": "操作系统的特性包括并发、共享、虚拟和异步，以及核心功能如进程管理、存储管理等。",
        "发展历程": "操作系统的发展历程从无操作系统发展到多种类型的现代操作系统，反映了计算机技术的进步。",
        "系统架构": "操作系统的架构包括模块化、分层式和微内核等设计方法，影响系统的性能、可靠性和可扩展性。"
    },
    "输入输出管理": {
        "设备管理": "设备管理负责各类输入输出设备的控制与协调，确保设备能正确地与计算机系统交互。",
        "IO硬件": "IO硬件包括设备控制器和通道等，提供设备与计算机系统之间的物理接口。",
        "中断处理": "中断处理负责响应设备发出的中断信号，协调IO设备与CPU的交互过程。",
        "IO控制方式": "IO控制方式包括轮询、中断、DMA和通道控制等，决定了数据传输的效率和CPU的参与程度。",
        "IO软件": "IO软件提供设备独立的接口和缓冲机制，简化应用程序的IO操作并提高效率。"
    },
    "磁盘存储管理": {
        "外存组织": "外存组织定义了文件在磁盘上的物理布局方式，包括连续组织、链接组织和索引组织等。",
        "文件存储管理": "文件存储管理负责磁盘空间的分配和回收，确保文件系统能高效利用磁盘空间。",
        "磁盘IO优化": "磁盘IO优化通过缓存、调度和并行技术提高磁盘访问的效率，减少IO等待时间。",
        "磁盘可靠性": "磁盘可靠性技术保证数据的安全和完整，防止硬件故障导致的数据丢失。"
    },
    "处理机调度与死锁": {
        "调度准则": "调度准则定义了评价调度算法的标准，包括资源利用率、吞吐量、公平性等指标。",
        "三级调度": "三级调度包括作业调度、内存调度和进程调度，共同实现从作业到进程执行的全过程调度。",
        "进程调度方式": "进程调度方式包括非抢占调度和抢占调度，决定了进程获取CPU的竞争规则。",
        "调度算法": "调度算法决定下一个获得CPU的进程，包括先来先服务、短作业优先等多种算法。",
        "死锁管理": "死锁管理通过预防、避免、检测和解除等方法处理系统中的死锁问题，确保系统正常运行。"
    },
    "进程同步": {
        "进程同步基本概念": "进程同步的基本概念包括临界资源和临界区，是理解进程同步问题的基础。",
        "同步机制": "同步机制提供控制并发进程执行顺序的工具，包括软硬件实现的各种同步原语。",
        "经典问题": "经典同步问题如生产者消费者、哲学家进餐等，代表了不同类型的进程同步应用场景。"
    }
}

# 项目层描述（为叶子节点添加描述）
def generate_item_description(value):
    """为叶子节点生成描述内容"""
    return {"描述": value}

def transform_json():
    """转换原始JSON到新的格式"""
    json_data = json.loads(data)
    new_data = {}
    
    # 处理每个主题
    for topic, topic_content in json_data.items():
        new_data[topic] = {
            "描述": topic_descriptions.get(topic, f"{topic}是操作系统的重要组成部分。")
        }
        
        # 处理每个子主题
        for subtopic, subtopic_content in topic_content.items():
            new_data[topic][subtopic] = {
                "描述": subtopic_descriptions.get(topic, {}).get(subtopic, f"{subtopic}是{topic}的重要组成部分。")
            }
            #print(f"subtopic_content:{subtopic_content}")
            # 处理叶子节点
            for item, value in subtopic_content.items():
                
                new_data[topic][subtopic][item] = generate_item_description(value)
                #new_data[topic][subtopic][item] = generate_item_description(subtopic_content)
    
    return new_data

# 执行转换
new_json_data = transform_json()

# 输出新的JSON格式（美化输出）
print(json.dumps(new_json_data, ensure_ascii=False, indent=2))

# 也可以保存到文件
with open('new_format.json', 'w', encoding='utf-8') as f:
    json.dump(new_json_data, f, ensure_ascii=False, indent=2)


